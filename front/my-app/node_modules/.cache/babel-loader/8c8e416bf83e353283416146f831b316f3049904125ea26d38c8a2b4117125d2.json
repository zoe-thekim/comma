{"ast":null,"code":"var _jsxFileName = \"/Users/varm/Source/web/front/my-app/src/Auth/Authenticator.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { createContext, useContext, useEffect, useState } from \"react\";\nimport { api } from \"../api\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext(null);\nexport function AuthProvider({\n  children\n}) {\n  _s();\n  const [user, setUser] = useState(null); // { memberId, memberNo } or null\n  const [loading, setLoading] = useState(true);\n\n  // 앱 시작/새로고침 시 세션 확인\n  useEffect(() => {\n    let mounted = true;\n    (async () => {\n      try {\n        const res = await api.get(\"/GetMemberSession\"); // 세션 있으면 200\n        console.log(\"로그인 확인\");\n        if (mounted) setUser(res.data);\n      } catch {\n        if (mounted) setUser(null); // 401 등 → 비로그인\n      } finally {\n        if (mounted) setLoading(false);\n      }\n    })();\n    return () => {\n      mounted = false;\n    };\n  }, []);\n\n  // 로그인\n  async function login(memberId, memberPwd) {\n    const res = await api.post(\"/login\", {\n      memberId,\n      memberPwd\n    });\n    console.log(\"Authenticator: 로그인 성공\"); // 서버가 { status:\"OK\", memberId, memberNo } 형태로 준다고 가정//\n    setUser(res.data);\n    return res.data;\n  }\n\n  // 로그아웃\n  async function logout() {\n    await api.post(\"/auth/logout\");\n    setUser(null);\n  }\n  const value = {\n    user,\n    loading,\n    login,\n    logout,\n    isAuthed: !!user\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 12\n  }, this);\n}\n_s(AuthProvider, \"NiO5z6JIqzX62LS5UWDgIqbZYyY=\");\n_c = AuthProvider;\nexport function useAuth() {\n  _s2();\n  const ctx = useContext(AuthContext);\n  if (!ctx) throw new Error(\"useAuth must be used within AuthProvider\");\n  return ctx;\n}\n_s2(useAuth, \"/dMy7t63NXD4eYACoT93CePwGrg=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["createContext","useContext","useEffect","useState","api","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","user","setUser","loading","setLoading","mounted","res","get","console","log","data","login","memberId","memberPwd","post","logout","value","isAuthed","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","ctx","Error","$RefreshReg$"],"sources":["/Users/varm/Source/web/front/my-app/src/Auth/Authenticator.js"],"sourcesContent":["import { createContext, useContext, useEffect, useState } from \"react\";\nimport { api } from \"../api\";\nconst AuthContext = createContext(null);\n\nexport function AuthProvider({ children }) {\n    const [user, setUser] = useState(null); // { memberId, memberNo } or null\n    const [loading, setLoading] = useState(true);\n\n // 앱 시작/새로고침 시 세션 확인\nuseEffect(() => {\n    let mounted = true;\n    (async () => {\n        try {\n            const res = await api.get(\"/GetMemberSession\"); // 세션 있으면 200\n            console.log(\"로그인 확인\");\n            if (mounted) setUser(res.data);\n        }\n        catch { if (mounted) setUser(null); // 401 등 → 비로그인\n        }\n        finally {\n            if (mounted) setLoading(false);\n        }\n        })();\n    return () => { mounted = false; };\n    }, []);\n\n// 로그인\nasync function login(memberId, memberPwd) {\n    const res = await api.post(\"/login\", { memberId, memberPwd });\n    console.log(\"Authenticator: 로그인 성공\"); // 서버가 { status:\"OK\", memberId, memberNo } 형태로 준다고 가정//\n    setUser(res.data); return res.data; }\n\n// 로그아웃\nasync function logout() {\n    await api.post(\"/auth/logout\");\n    setUser(null); }\n    const value = { user, loading, login, logout, isAuthed: !!user };\n    return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\n}\nexport function useAuth() { const ctx = useContext(AuthContext);\n\n    if (!ctx) throw new Error(\"useAuth must be used within AuthProvider\");\n    return ctx;\n}"],"mappings":";;;AAAA,SAASA,aAAa,EAAEC,UAAU,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AACtE,SAASC,GAAG,QAAQ,QAAQ;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAC7B,MAAMC,WAAW,gBAAGP,aAAa,CAAC,IAAI,CAAC;AAEvC,OAAO,SAASQ,YAAYA,CAAC;EAAEC;AAAS,CAAC,EAAE;EAAAC,EAAA;EACvC,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;EACxC,MAAM,CAACU,OAAO,EAAEC,UAAU,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC;;EAE/C;EACDD,SAAS,CAAC,MAAM;IACZ,IAAIa,OAAO,GAAG,IAAI;IAClB,CAAC,YAAY;MACT,IAAI;QACA,MAAMC,GAAG,GAAG,MAAMZ,GAAG,CAACa,GAAG,CAAC,mBAAmB,CAAC,CAAC,CAAC;QAChDC,OAAO,CAACC,GAAG,CAAC,QAAQ,CAAC;QACrB,IAAIJ,OAAO,EAAEH,OAAO,CAACI,GAAG,CAACI,IAAI,CAAC;MAClC,CAAC,CACD,MAAM;QAAE,IAAIL,OAAO,EAAEH,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC;MACpC,CAAC,SACO;QACJ,IAAIG,OAAO,EAAED,UAAU,CAAC,KAAK,CAAC;MAClC;IACA,CAAC,EAAE,CAAC;IACR,OAAO,MAAM;MAAEC,OAAO,GAAG,KAAK;IAAE,CAAC;EACjC,CAAC,EAAE,EAAE,CAAC;;EAEV;EACA,eAAeM,KAAKA,CAACC,QAAQ,EAAEC,SAAS,EAAE;IACtC,MAAMP,GAAG,GAAG,MAAMZ,GAAG,CAACoB,IAAI,CAAC,QAAQ,EAAE;MAAEF,QAAQ;MAAEC;IAAU,CAAC,CAAC;IAC7DL,OAAO,CAACC,GAAG,CAAC,uBAAuB,CAAC,CAAC,CAAC;IACtCP,OAAO,CAACI,GAAG,CAACI,IAAI,CAAC;IAAE,OAAOJ,GAAG,CAACI,IAAI;EAAE;;EAExC;EACA,eAAeK,MAAMA,CAAA,EAAG;IACpB,MAAMrB,GAAG,CAACoB,IAAI,CAAC,cAAc,CAAC;IAC9BZ,OAAO,CAAC,IAAI,CAAC;EAAE;EACf,MAAMc,KAAK,GAAG;IAAEf,IAAI;IAAEE,OAAO;IAAEQ,KAAK;IAAEI,MAAM;IAAEE,QAAQ,EAAE,CAAC,CAAChB;EAAK,CAAC;EAChE,oBAAOL,OAAA,CAACC,WAAW,CAACqB,QAAQ;IAACF,KAAK,EAAEA,KAAM;IAAAjB,QAAA,EAAEA;EAAQ;IAAAoB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAuB,CAAC;AAChF;AAACtB,EAAA,CAlCeF,YAAY;AAAAyB,EAAA,GAAZzB,YAAY;AAmC5B,OAAO,SAAS0B,OAAOA,CAAA,EAAG;EAAAC,GAAA;EAAE,MAAMC,GAAG,GAAGnC,UAAU,CAACM,WAAW,CAAC;EAE3D,IAAI,CAAC6B,GAAG,EAAE,MAAM,IAAIC,KAAK,CAAC,0CAA0C,CAAC;EACrE,OAAOD,GAAG;AACd;AAACD,GAAA,CAJeD,OAAO;AAAA,IAAAD,EAAA;AAAAK,YAAA,CAAAL,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}